#!/usr/bin/env bash

# Run Windows games through Proton/Wine or native Linux games

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ Proton GE
find_latest_proton() {
    local proton_dir="$HOME/.steam/steam/compatibilitytools.d"
    local latest_proton=""
    local max_version=0

    if [[ -d "$proton_dir" ]]; then
        for dir in "$proton_dir"/GE-Proton*; do
            if [[ -d "$dir" ]]; then
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ (—Ñ–æ—Ä–º–∞—Ç GE-ProtonX-Y)
                local version=$(basename "$dir" | grep -oP '(?<=GE-Proton)\d+-\d+')
                if [[ "$version" =~ ^([0-9]+)-([0-9]+)$ ]]; then
                    local major=${BASH_REMATCH[1]}
                    local minor=${BASH_REMATCH[2]}
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —á–∏—Å–ª–∞ (major * 100 + minor)
                    local version_num=$((major * 100 + minor))
                    if (( version_num > max_version )); then
                        max_version=$version_num
                        latest_proton="$dir"
                    fi
                fi
            fi
        done
    fi

    echo "$latest_proton"
}

# Default parameters
PROTON_DIR="${PROTON_DIR:-$(find_latest_proton)}"
PROTON_PREFIX="${PROTON_PREFIX:-$HOME/.proton}"
STEAM_INSTALL_PATH="${STEAM_INSTALL_PATH:-$HOME/.steam/root}"
DXVK_HUD=0
PROTON_USE_WINED3D=0
USE_WINE=0
EXE_FILE=""
IS_LINUX_GAME=0

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            echo "Usage: $0 [OPTIONS] /path/to/game[.exe]"
            echo ""
            echo "Options:"
            echo "  -h, --help         Show this help message"
            echo "  --hud              Enable DXVK HUD (Windows games only)"
            echo "  --prefix PATH      Specify custom Proton/Wine prefix path"
            echo "  --proton PATH      Specify custom Proton GE path"
            echo "  --steam PATH       Specify custom Steam installation path"
            echo "  --opengl           Use OpenGL instead of Vulkan (Windows games)"
            echo "  --wine             Force using Wine instead of Proton (Windows games)"
            echo ""
            echo "Environment variables:"
            echo "  PROTON_DIR (--proton), "
            echo "  PROTON_PREFIX (--prefix), "
            echo "  STEAM_INSTALL_PATH (--steam) "
            exit 0
            ;;
        --hud)
            DXVK_HUD=1
            shift
            ;;
        --prefix)
            PROTON_PREFIX="$2"
            shift 2
            ;;
        --proton)
            PROTON_DIR="$2"
            shift 2
            ;;
        --steam)
            STEAM_INSTALL_PATH="$2"
            shift 2
            ;;
        --opengl)
            PROTON_USE_WINED3D=1
            shift
            ;;
        --wine)
            USE_WINE=1
            shift
            ;;
        *)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–µ–π —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
            if [[ -z "$EXE_FILE" ]]; then
                EXE_FILE="$1"
            else
                EXE_FILE="$EXE_FILE $1"
            fi
            
            # Remove surrounding quotes if they exist
            EXE_FILE="${EXE_FILE%\"}"
            EXE_FILE="${EXE_FILE#\"}"
            EXE_FILE="${EXE_FILE%\'}"
            EXE_FILE="${EXE_FILE#\'}"
            
            shift
            break  # Stop parsing after getting the game path
            ;;
    esac
done

# Validate game file
if [[ -z "$EXE_FILE" ]]; then
    echo "‚ùå No game specified!" >&2
    echo "Usage: $0 [OPTIONS] /path/to/game[.exe]" >&2
    echo "Use --help for usage information" >&2
    exit 1
fi

# Check if file exists (handle both relative and absolute paths)
if [[ ! -e "$EXE_FILE" ]]; then
    echo "‚ùå File or directory '$EXE_FILE' does not exist!" >&2
    exit 1
fi

if [[ ! -f "$EXE_FILE" ]]; then
    echo "‚ùå File does not exist: '$EXE_FILE'" >&2
    echo "Usage: $0 /path/to/game.exe" >&2
    exit 1
fi

# Determine if this is a Linux or Windows game
if [[ "$EXE_FILE" == *.exe || "$EXE_FILE" == *.EXE ]]; then
    IS_LINUX_GAME=0
else
    IS_LINUX_GAME=1
fi

# Windows game specific checks
if [[ $IS_LINUX_GAME -eq 0 ]]; then
    if [[ $USE_WINE -eq 0 ]]; then
        if [[ -z "$PROTON_DIR" || ! -f "$PROTON_DIR/proton" ]]; then
            echo "‚ö†Ô∏è Proton not found in $PROTON_DIR, falling back to Wine..."
            USE_WINE=1
        else
            echo "‚ÑπÔ∏è Using Proton from: $PROTON_DIR"
        fi
    fi
fi

# Export common variables for Windows games
if [[ $IS_LINUX_GAME -eq 0 ]]; then
    export WINEDLLOVERRIDES="dxgi,d3d11,d3d10core,d3d9=n,b"
    export DXVK_HUD
    export PROTON_USE_WINED3D
fi

# Create prefix if doesn't exist (Windows games only)
if [[ $IS_LINUX_GAME -eq 0 && ! -d "$PROTON_PREFIX" ]]; then
    echo "üõ†Ô∏è Creating new prefix in $PROTON_PREFIX"
    mkdir -p "$PROTON_PREFIX"
fi

# Run the game
echo "=== Launching Game ==="
echo "Game:          $EXE_FILE"
if [[ $IS_LINUX_GAME -eq 0 ]]; then
    echo "Using:         $([[ $USE_WINE -eq 1 ]] && echo "Wine" || echo "Proton")"
    echo "Prefix:        $PROTON_PREFIX"
    echo "DXVK HUD:      $([[ $DXVK_HUD -eq 1 ]] && echo "enabled" || echo "disabled")"
    echo "Render mode:   $([[ $PROTON_USE_WINED3D -eq 1 ]] && echo "OpenGL (WineD3D)" || echo "Vulkan (DXVK)")"
else
    echo "Mode:          Native Linux game"
fi
echo "==============================="

if [[ $IS_LINUX_GAME -eq 1 ]]; then
    # Linux game execution
    if [[ -d "$EXE_FILE" ]]; then
        # Directory - look for launcher.sh or executable
        if [[ -f "$EXE_FILE/launcher.sh" ]]; then
            cd "$EXE_FILE" && ./launcher.sh
        elif [[ -f "$EXE_FILE/start.sh" ]]; then
            cd "$EXE_FILE" && ./start.sh
        else
            # Find first executable in directory
            EXECUTABLE=$(find "$EXE_FILE" -maxdepth 1 -type f -executable | head -n 1)
            if [[ -n "$EXECUTABLE" ]]; then
                cd "$EXE_FILE" && ./"$(basename "$EXECUTABLE")"
            else
                echo "‚ùå No executable found in directory '$EXE_FILE'" >&2
                exit 1
            fi
        fi
    else
        # Single file execution
        if [[ -x "$EXE_FILE" ]]; then
            "$EXE_FILE"
        else
            echo "‚ùå File '$EXE_FILE' is not executable" >&2
            echo "Try: chmod +x '$EXE_FILE'" >&2
            exit 1
        fi
    fi
else
    # Windows game execution
    if [[ $USE_WINE -eq 1 ]]; then
        WINEPREFIX="$PROTON_PREFIX" wine "$EXE_FILE"
    else
        export STEAM_COMPAT_DATA_PATH="$PROTON_PREFIX"
        export STEAM_COMPAT_CLIENT_INSTALL_PATH="$STEAM_INSTALL_PATH"
        "$PROTON_DIR/proton" run "$EXE_FILE"
    fi
fi
